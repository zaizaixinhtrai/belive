apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'
//check.dependsOn 'checkstyle', 'findbugs', 'pmd'
task checkstyle(type: Checkstyle) {
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    exclude '**/R.java'
    exclude '**/BuildConfig.java'

    configFile file("${project.rootDir}/build-config/checkstyle/checkstyle.xml")
//    def configProps = ['proj.module.dir': projectDir.absolutePath]
//    configProperties configProps

    // empty classpath
    classpath = files()

    showViolations true

    reports {
        xml.enabled false
        html.enabled true
    }
}
task findbugs(type: FindBugs, dependsOn: "assembleDebug") {
    ignoreFailures = true
    effort = "max"
    reportLevel = "high"
    excludeFilter = new File("${project.rootDir}/build-config/findbugs/findbugs-filter.xml")
    classes = files("$project.buildDir/intermediates/classes/")

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = false
        html.enabled = true

        xml {
            destination = new File("$project.buildDir/reports/findbugs/findbugs.xml")
            xml.withMessages true
        }
        html {
            destination = new File("$project.buildDir/reports/findbugs/findbugs.html")
        }
    }

    classpath = files()
}

task pmd(type: Pmd) {
    ruleSetFiles = files("${project.rootDir}/build-config/pmd/pmd-ruleset.xml")
    ignoreFailures = true
    ruleSets = ["java-basic", "java-braces", "java-strings"]

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = true
        html.enabled = true

        xml {
            destination = new File("$project.buildDir/reports/pmd/pmd.xml")
        }
        html {
            destination = new File("$project.buildDir/reports/pmd/pmd.html")
        }
    }
}